#!/usr/bin/env sh
# AI NOTE: This file is AI-generated, there may be dragons.

set -ex

# Repo paths (ignores core.hooksPath)
GIT_DIR="$(git rev-parse --git-dir)"
REPO_ROOT="$(git rev-parse --show-toplevel)"
LOCAL_HOOK="$GIT_DIR/hooks/pre-commit"

echo "[hooked] Running global pre-commit checks..."
# --- Your global checks go here ---
pre_commit_version=$(pre-commit --version)
echo "[hooked] pre-commit version: $pre_commit_version"
pre-commit autoupdate

duplicated_hooks=$(hooked list-duplicated-hooks "${REPO_ROOT}/.pre_commit_config.yaml")
echo "[hooked] Duplicated hooks in repo: $duplicated_hooks"

internal SKIP="${duplicated_hooks}"
# shellcheck disable=SC2046
pre-commit run --config ~/.config/hooked/config/.pre-commit-config.yaml --files \
  $(git diff --cached --name-only --diff-filter=ACM)

echo "[hooked] Finished running global hooks..."

# Resolve paths to avoid recursion if symlinked to global
resolve_path() {
  if command -v realpath >/dev/null 2>&1; then
    realpath "$1" 2>/dev/null || printf "%s" "$1"
  elif command -v python3 >/dev/null 2>&1; then
    python3 -c 'import os,sys; print(os.path.realpath(sys.argv[1]))' "$1" 2>/dev/null || printf "%s" "$1"
  else
    printf "%s" "$1"
  fi
}
THIS="$(resolve_path "$0")"
LOCAL_RESOLVED="$(resolve_path "$LOCAL_HOOK")"

# 1) Prefer repo-local hook if present (covers pre-commit's installed hook)
if [ -x "$LOCAL_HOOK" ] && [ "$LOCAL_RESOLVED" != "$THIS" ]; then
  echo "[hooked] Found repo-local .git/hooks/pre-commit â†’ running it..."
  "$LOCAL_HOOK" "$@"
  exit $?
fi

# 2) If pre-commit is configured but hooks aren't installed, install + run it
if [ -f "$REPO_ROOT/.pre-commit-config.yaml" ]; then
  if command -v pre-commit >/dev/null 2>&1; then
    echo "[hooked] .pre-commit-config.yaml detected; installing hooks..."
    git_hook_dir="$(git config --global core.hooksPath)"

    echo "[hooked] Current core.hooksPath: $git_hook_dir"
    echo "[hooked] Temporarily unsetting core.hooksPath..."

    git config unset --global core.hooksPath
    echo "[hooked] Running pre-commit install..."
    pre-commit install

    # Restore the original hooks path
    echo "[hooked] Restoring core.hooksPath to $git_hook_dir..."
    if [ -n "$git_hook_dir" ]; then
        git config --global core.hooksPath "$git_hook_dir"
    fi

    echo "[hooked] Installation complete, running hooks..."
    pre-commit run --hook-stage pre-commit
    exit $?
  else
    echo "[hooked] ERROR: .pre-commit-config.yaml found but 'pre-commit' is not in PATH."
    echo "Please install 'pre-commit' (e.g., via 'pip install --upgrade pre-commit') and re-run."
    exit 1
  fi
fi

# 3) Nothing else to do
echo "[hooked] No repo-local hook or pre-commit config found. Done."
exit 0
